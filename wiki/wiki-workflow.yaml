---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: wiki
  namespace: wiki
spec:
  entrypoint: ci
  serviceAccountName: wiki
  artifactGC:
    strategy: OnWorkflowDeletion
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 500Mi
  arguments:
    parameters:
      - name: repo
        value: https://github.com/argoproj/argo-workflows.git
      - name: revision
        value: v2.1.1
      - name: oci-registry
        value: docker.io  
      - name: oci-image
        value: templates/workflow
      - name: oci-tag
        value: v0.0.1
      - name: github-token
        value: ""
      # - name: push-image
      #   value: "true"
  templates:
    - name: ci
      dag:
        tasks:
          - name: git-clone
            template: git-clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: revision
                  value: "{{workflow.parameters.revision}}"

          - name: ls
            template: ls
            dependencies:
              - git-clone
          
          - name: build
            template: build
            dependencies:
              - git-clone
              - ls
          
          - name: push-image
            template: push-image
            when: "{{workflow.parameters.push-image}} == true"
            dependencies:
              - build
    
    - name: git-clone
      inputs:
        parameters:
          - name: repo
            value: ""
          - name: revision
            value: ""
      artifacts:
        - name: argo-source
          path: /workdir
          git:
            repo: "{{workflow.parameters.repo}}"
            revision: "{{workflow.parameters.revision}}"
            username: "oauth2"
            password: "{{workflow.parameters.github-token}}"
      container:
        image: alpine:3.17
        command:
          - sh
          - -c
        args:
          - |
            ls -la /workdir
            cp -r /workdir/wiki /workdir
            ls -la /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    
    - name: ls
      container:
        name: ''
        image: alpine:3.17
        command:
          - sh
          - -c
        args:
          - |
            echo "Listing /workdir"
            ls -la /workdir
            echo "Listing all files:"
            find /workdir
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    
    - name: build
      inputs:
        parameters:
          - name: oci-image
            value: ''
          - name: oci-tag
            value: ''
          - name: dockerfile-path
            value: ''
      container:
        name: ''
        image: gcr.io/kaniko-project/executor:latest
        args:
          - >-
          - --context=/workdir/wiki
          - --dockerfile=/workdir/wiki/Dockerfile
          - --destination={{workflow.parameters.oci-image}}:{{workflow.parameters.oci-tag}}
          - --tar-path=/workdir/.tar  
          - --no-push
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    
    - name: push-image
      inputs:
        parameters:
          - name: oci-tag
            value: ''
          - name: oci-image
            value: ''
          - name: oci-registry
            value: ''
      script:
        image: gcr.io/go-containerregistry/crane:debug
        env:
          - name: OCI_REGISTRY_USER
            value: "{{workflow.parameters.registry-user}}" 
          - name: OCI_REGISTRY_PASSWORD
            value: "{{workflow.parameters.registry-password}}"  
        command:
          - sh
        source: |
          echo "oci-registry: {{workflow.parameters.oci-registry}}"
          echo "oci-image: {{workflow.parameters.oci-image}}"
          echo "oci-tag: {{workflow.parameters.oci-tag}}"


          if [ -z "{{workflow.parameters.oci-registry}}" ] || [ -z "{{workflow.parameters.oci-image}}" ] || [ -z "{{workflow.parameters.oci-tag}}" ]; then
            echo "Missing required parameters"
            exit 1
          fi
          
          crane auth login {{workflow.parameters.oci-registry}} -u $OCI_REGISTRY_USER -p $OCI_REGISTRY_PASSWORD 
          crane push /workdir/.tar {{workflow.parameters.oci-registry}}/{{workflow.parameters.oci-image}}:{{workflow.parameters.oci-tag}}          
        volumeMounts:
          - name: workdir
            mountPath: /workdir
